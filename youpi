import React, { useMemo } from 'react';
import { motion } from 'framer-motion';
import { Activity, Server, Shield, Code, Clock, CheckCircle, AlertTriangle, Database, Network } from 'lucide-react';

const ServiceStatistics: React.FC<{ services: APIService[] }> = ({ services }) => {
  const stats = useMemo(() => {
    // Calculer les statistiques à partir des services
    const totalServices = services.length;
    const productionServices = services.filter(s => s.developmentStatus === 'Production').length;
    const inProgressServices = services.filter(s => s.developmentStatus === 'inProgress').length;
    const documentedServices = services.filter(s => s.isDocumented).length;
    const java17Services = services.filter(s => s.java17Migrated).length;
    const bridgeServices = services.filter(s => s.bridgeCommunication).length;
    const criticalServices = services.filter(s => s.criticality === 'Critique').length;

    // Calculer le pourcentage de migration Java 17
    const java17Percentage = Math.round((java17Services / totalServices) * 100);

    // Calculer le pourcentage de documentation
    const documentationPercentage = Math.round((documentedServices / totalServices) * 100);

    return [
      {
        id: 'total-services',
        label: 'Services Totaux',
        value: totalServices,
        icon: <Server className="w-6 h-6" />,
        color: 'blue',
        trend: '+5% ce mois',
        detail: `${productionServices} en prod, ${inProgressServices} en dev`
      },
      {
        id: 'critical-services',
        label: 'Services Critiques',
        value: criticalServices,
        icon: <Shield className="w-6 h-6" />,
        color: 'red',
        trend: 'Haute priorité',
        detail: `${Math.round((criticalServices / totalServices) * 100)}% du total`
      },
      {
        id: 'documentation',
        label: 'Documentation',
        value: `${documentationPercentage}%`,
        icon: <Code className="w-6 h-6" />,
        color: 'green',
        trend: documentationPercentage === 100 ? 'Complète' : 'En progression',
        detail: `${documentedServices} services documentés`
      },
      {
        id: 'java-migration',
        label: 'Migration Java 17',
        value: `${java17Percentage}%`,
        icon: <Activity className="w-6 h-6" />,
        color: java17Percentage >= 80 ? 'green' : 'orange',
        trend: 'En cours',
        detail: `${java17Services} services migrés`
      }
    ];
  }, [services]);

  return (
    <div className="max-w-7xl mx-auto px-4 -mt-20">
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {stats.map((stat, index) => (
          <motion.div
            key={stat.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: index * 0.1 }}
            className="bg-white rounded-xl shadow-lg shadow-secondary-900/5 overflow-hidden p-6 hover:shadow-xl hover:shadow-secondary-900/10 transition-all duration-300"
          >
            <div className="flex items-center justify-between mb-4">
              <div className={`bg-${stat.color}-100 p-3 rounded-lg`}>
                <div className={`text-${stat.color}-600`}>
                  {stat.icon}
                </div>
              </div>
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 0.5 + index * 0.1 }}
                className={`px-2 py-1 rounded-full text-xs font-medium bg-${stat.color}-100 text-${stat.color}-700`}
              >
                {stat.trend}
              </motion.div>
            </div>

            <div>
              <h3 className="text-sm font-medium text-neutral-500">{stat.label}</h3>
              <div className="mt-2 flex items-end justify-between">
                <p className="text-2xl font-bold text-neutral-800">
                  <AnimatedNumber value={parseInt(stat.value)} />
                  {isNaN(parseInt(stat.value)) ? stat.value : ''}
                </p>
                <span className="text-xs text-neutral-500">{stat.detail}</span>
              </div>
            </div>

            <div className="mt-4">
              <div className="w-full h-1 bg-neutral-100 rounded-full overflow-hidden">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: stat.value }}
                  transition={{ duration: 1, delay: 0.8 + index * 0.1 }}
                  className={`h-full bg-${stat.color}-500 rounded-full`}
                />
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {/* Section des indicateurs supplémentaires */}
      <div className="mt-6 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4">
        {[
          {
            icon: <Database className="w-4 h-4" />,
            label: 'Services avec DB dédiée',
            value: services.filter(s => s?.dataSources?.dedicatedDB).length
          },
          {
            icon: <Network className="w-4 h-4" />,
            label: 'Bridges actifs',
            value: bridgeServices
          },
          {
            icon: <CheckCircle className="w-4 h-4" />,
            label: 'Publiés sur Skies',
            value: services.filter(s => s.publishedOnSkies).length
          },
          {
            icon: <AlertTriangle className="w-4 h-4" />,
            label: 'En attente de migration',
            value: totalServices - java17Services
          },
          {
            icon: <Clock className="w-4 h-4" />,
            label: 'Déployés sur DEV',
            value: services.filter(s => s.deployedOnDev).length
          }
        ].map((indicator, index) => (
          <motion.div
            key={indicator.label}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: 1 + index * 0.1 }}
            className="bg-white/50 backdrop-blur-sm rounded-lg p-3 flex items-center gap-2 shadow-sm hover:shadow-md transition-shadow duration-300"
          >
            <div className="text-primary-600">
              {indicator.icon}
            </div>
            <div>
              <p className="text-xs text-neutral-500">{indicator.label}</p>
              <p className="text-sm font-semibold text-neutral-800">{indicator.value}</p>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default ServiceStatistics;



-------------------------
import ServiceStatistics from './components/ServiceStatistics';

// Dans votre composant principal
<ServiceStatistics services={services} />