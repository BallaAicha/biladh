package com.org.example.plateforme;

import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface OverridePhysicalName {
    // Pas de valeur
}


-----------
package com.org.example.plateforme;

import jakarta.persistence.Table;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;
import org.springframework.core.type.filter.AnnotationTypeFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class OverridePhysicalNameFinder {

    private static final Logger log = LoggerFactory.getLogger(OverridePhysicalNameFinder.class);

    public static final List<OverridePhysicalNameInfo> overridePhysicalNames = new ArrayList<>();

    static {
        Set<Class<?>> annotatedEntities = findAnnotatedEntities("com.org.example.plateforme");
        for (Class<?> entityClass : annotatedEntities) {
            Table tableAnnotation = entityClass.getAnnotation(Table.class);
            if (tableAnnotation != null) {
                String tableName = tableAnnotation.name();
                overridePhysicalNames.add(new OverridePhysicalNameInfo(entityClass, tableName));
                log.info("OverridePhysicalName found: {} -> {}", entityClass.getSimpleName(), tableName);
            } else {
                log.warn("Class {} annotated with @OverridePhysicalName but missing @Table", entityClass.getName());
            }
        }
    }

    public static Set<Class<?>> findAnnotatedEntities(String scanPackage) {
        Set<Class<?>> foundEntities = new HashSet<>();
        ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);
        provider.addIncludeFilter(new AnnotationTypeFilter(OverridePhysicalName.class));
        for (BeanDefinition beanDef : provider.findCandidateComponents(scanPackage)) {
            try {
                Class<?> cl = Class.forName(beanDef.getBeanClassName());
                foundEntities.add(cl);
            } catch (Exception e) {
                log.error("Error loading class: {}", beanDef.getBeanClassName(), e);
            }
        }
        return foundEntities;
    }

    public static class OverridePhysicalNameInfo {
        public final Class<?> entityClass;
        public final String tableName;

        public OverridePhysicalNameInfo(Class<?> entityClass, String tableName) {
            this.entityClass = entityClass;
            this.tableName = tableName;
        }
    }
}



-----
private final static List<String> tables = OverridePhysicalNameFinder.overridePhysicalNames
    .stream()
    .map(info -> info.tableName)
    .collect(Collectors.toList());
