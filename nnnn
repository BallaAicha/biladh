import { useQuery } from '@tanstack/react-query';
import { APIService } from '../../types/api';
import { services } from '../../services/api';

export const useAllServices = () => {
    return useQuery<APIService[]>({
        queryKey: ['services', 'all'],
        queryFn: () => services.getAllServices(),
    });
};

export default useAllServices;






----------------
import { useQuery } from '@tanstack/react-query';
import { APIService } from '../../types/api';
import apiDocumentationService from '../../services/api-documentation-service';

export const useAllServices = () => {
    return useQuery<APIService[]>({
        queryKey: ['services', 'all'],
        queryFn: () => apiDocumentationService.getAllServices(),
    });
};

export default useAllServices;


---------------------
Pagination: 1


import React from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { motion } from 'framer-motion';

interface PaginationProps {
    currentPage: number;
    totalPages: number;
    onPageChange: (page: number) => void;
}

const Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {
    const getPageNumbers = () => {
        const pages = [];
        const maxVisiblePages = 5;

        if (totalPages <= maxVisiblePages) {
            for (let i = 1; i <= totalPages; i++) {
                pages.push(i);
            }
        } else {
            if (currentPage <= 3) {
                for (let i = 1; i <= 4; i++) pages.push(i);
                pages.push(-1); // Separator
                pages.push(totalPages);
            } else if (currentPage >= totalPages - 2) {
                pages.push(1);
                pages.push(-1); // Separator
                for (let i = totalPages - 3; i <= totalPages; i++) pages.push(i);
            } else {
                pages.push(1);
                pages.push(-1); // Separator
                for (let i = currentPage - 1; i <= currentPage + 1; i++) pages.push(i);
                pages.push(-1); // Separator
                pages.push(totalPages);
            }
        }

        return pages;
    };

    return (
        <div className="flex items-center justify-center space-x-2 mt-8">
            <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={() => onPageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className={`p-2 rounded-lg ${
                    currentPage === 1
                        ? 'bg-neutral-100 text-neutral-400 cursor-not-allowed'
                        : 'bg-white text-primary-600 hover:bg-primary-50 border border-primary-200'
                }`}
            >
                <ChevronLeft className="w-5 h-5" />
            </motion.button>

            {getPageNumbers().map((pageNum, index) => (
                <React.Fragment key={index}>
                    {pageNum === -1 ? (
                        <span className="px-4 py-2">...</span>
                    ) : (
                        <motion.button
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                            onClick={() => onPageChange(pageNum)}
                            className={`px-4 py-2 rounded-lg font-medium ${
                                currentPage === pageNum
                                    ? 'bg-primary-600 text-white'
                                    : 'bg-white text-primary-600 hover:bg-primary-50 border border-primary-200'
                            }`}
                        >
                            {pageNum}
                        </motion.button>
                    )}
                </React.Fragment>
            ))}

            <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={() => onPageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className={`p-2 rounded-lg ${
                    currentPage === totalPages
                        ? 'bg-neutral-100 text-neutral-400 cursor-not-allowed'
                        : 'bg-white text-primary-600 hover:bg-primary-50 border border-primary-200'
                }`}
            >
                <ChevronRight className="w-5 h-5" />
            </motion.button>
        </div>
    );
};

export default Pagination;




---------------------



import { useState, useEffect } from 'react';
import { ChevronRight, Home, Search, Globe, Code, Book, Terminal, Database, ArrowRight, ExternalLink } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import HeaderDoc from "../components/documentation/HeaderDoc.tsx";
import MobileMenu from "../components/documentation/MobileMenu.tsx";
import ServiceDocumentationContainer from "../components/documentation/ServiceDocumentationContainer.tsx";
import TrigrammeSelect from "../components/documentation/TrigrammeSelect.tsx";
import ServicesList from "../components/documentation/ServicesList.tsx";
import Pagination from "../components/documentation/Pagination.tsx";

import { APIService } from '../types/api';
import { useQueryClient } from '@tanstack/react-query';
import { useTrigrammes } from "../hooks/apis/useTrigrammes.ts";
import { useServicesByTrigramme } from "../hooks/apis/useServicesByTrigramme.ts";
import { useService } from "../hooks/apis/useService.ts";
import { useAllServices } from "../hooks/apis/useAllServices.ts";
import { Footer } from "../components/commons/Footer.tsx";

export function APIDocumentation() {
    const [selectedTrigramme, setSelectedTrigramme] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
    const [selectedServiceId, setSelectedServiceId] = useState<string | null>(null);
    const [scrolled, setScrolled] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const itemsPerPage = 9;

    // Fetch data using custom hooks
    const { data: trigrammes = [], isLoading: trigrammesLoading } = useTrigrammes();
    const { data: servicesForTrigramme = [], isLoading: servicesLoading } = useServicesByTrigramme(selectedTrigramme);
    const { data: selectedService, isLoading: serviceDetailLoading } = useService(selectedServiceId);
    const { data: allServices = [], isLoading: allServicesLoading } = useAllServices();

    const queryClient = useQueryClient();

    // Handle scroll effect
    useEffect(() => {
        const handleScroll = () => {
            setScrolled(window.scrollY > 20);
        };
        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    // Filter and paginate services
    const filteredServices = (selectedTrigramme ? servicesForTrigramme : allServices).filter(service => {
        const matchesSearch = service.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            service.description.toLowerCase().includes(searchTerm.toLowerCase());
        return matchesSearch;
    });

    const totalPages = Math.ceil(filteredServices.length / itemsPerPage);
    const paginatedServices = filteredServices.slice(
        (currentPage - 1) * itemsPerPage,
        currentPage * itemsPerPage
    );

    // Reset page when changing filters
    useEffect(() => {
        setCurrentPage(1);
    }, [selectedTrigramme, searchTerm]);

    const toggleMobileMenu = () => {
        setMobileMenuOpen(!mobileMenuOpen);
    };

    const handleServiceSelection = (service: APIService) => {
        setSelectedServiceId(service.id);
        queryClient.prefetchQuery({
            queryKey: ['service', service.id],
            queryFn: () => service
        });
    };

    const resetSelection = () => {
        setSelectedServiceId(null);
        setSelectedTrigramme(null);
    };

    const backToTrigrammeList = () => {
        setSelectedServiceId(null);
        setSelectedTrigramme(null);
    };

    const backToServicesList = () => {
        setSelectedServiceId(null);
    };

    const LoadingSpinner = () => (
        <div className="flex flex-col items-center justify-center py-10">
            <div className="animate-spin rounded-full h-12 w-12 border-4 border-primary-200 border-t-primary-600"></div>
            <p className="mt-4 text-primary-600 font-medium">Chargement en cours...</p>
        </div>
    );

    const QuickActionCard = ({ icon: Icon, title, description, onClick }: any) => (
        <motion.button
            onClick={onClick}
            className="group relative overflow-hidden bg-white p-6 rounded-2xl border border-neutral-200 hover:border-primary-300 transition-all duration-300"
            whileHover={{ y: -5, scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
        >
            <div className="relative z-10">
                <div className="mb-4 inline-flex p-3 bg-gradient-to-br from-primary-50 to-primary-100 rounded-xl">
                    <Icon className="h-6 w-6 text-primary-600" />
                </div>
                <h3 className="text-lg font-semibold text-neutral-900 mb-2">{title}</h3>
                <p className="text-sm text-neutral-600">{description}</p>
                <div className="mt-4 inline-flex items-center text-primary-600 text-sm font-medium">
                    En savoir plus
                    <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                </div>
            </div>
            <div className="absolute inset-0 bg-gradient-to-br from-primary-50/0 to-primary-100/0 group-hover:from-primary-50/50 group-hover:to-primary-100/50 transition-all duration-500" />
        </motion.button>
    );

    return (
        <div className="min-h-screen bg-gradient-to-br from-neutral-50 to-neutral-100">
            {/* Header avec effet de scroll */}
            <motion.div
                className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
                    scrolled ? 'bg-white/80 backdrop-blur-lg shadow-lg' : ''
                }`}
            >
                <HeaderDoc resetSelection={resetSelection} toggleMobileMenu={toggleMobileMenu} />
            </motion.div>

            <MobileMenu
                mobileMenuOpen={mobileMenuOpen}
                toggleMobileMenu={toggleMobileMenu}
                searchTerm={searchTerm}
                setSearchTerm={setSearchTerm}
                selectedTrigramme={selectedTrigramme}
                setSelectedTrigramme={setSelectedTrigramme}
                selectedService={selectedService || null}
                setSelectedService={handleServiceSelection}
                trigrammes={trigrammes}
                filteredServices={filteredServices}
            />

            <main className="pt-20">
                <AnimatePresence mode="wait">
                    <motion.div
                        key={selectedServiceId ? 'service' : (selectedTrigramme ? 'trigramme' : 'home')}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.3 }}
                        className="container mx-auto px-4 py-8"
                    >
                        {selectedService ? (
                            // Vue détaillée du service
                            <div className="max-w-7xl mx-auto">
                                <motion.nav
                                    initial={{ opacity: 0, y: 5 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    className="mb-8 flex items-center space-x-2 text-sm bg-white/50 backdrop-blur-lg p-4 rounded-2xl border border-neutral-200/50"
                                >
                                    <motion.button
                                        whileHover={{ scale: 1.1, rotate: -5 }}
                                        whileTap={{ scale: 0.9 }}
                                        onClick={backToTrigrammeList}
                                        className="text-primary-500 hover:text-primary-700"
                                    >
                                        <Home className="h-5 w-5" />
                                    </motion.button>
                                    <ChevronRight className="h-4 w-4 text-neutral-400" />
                                    <motion.span
                                        whileHover={{ scale: 1.05 }}
                                        className="text-primary-500 hover:text-primary-700 cursor-pointer font-medium"
                                        onClick={backToServicesList}
                                    >
                                        {selectedService.trigramme}
                                    </motion.span>
                                    <ChevronRight className="h-4 w-4 text-neutral-400" />
                                    <span className="font-medium text-secondary-900">{selectedService.name}</span>
                                </motion.nav>

                                {serviceDetailLoading ? (
                                    <LoadingSpinner />
                                ) : (
                                    <ServiceDocumentationContainer service={selectedService} />
                                )}
                            </div>
                        ) : (
                            <div className="max-w-7xl mx-auto">
                                <motion.div
                                    initial={{ opacity: 0, y: 5 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    className="flex flex-col md:flex-row md:items-center md:justify-between gap-6 mb-12"
                                >
                                    <div>
                                        <h1 className="text-4xl font-bold text-secondary-900">
                                            {selectedTrigramme ? (
                                                <>
                                                    Services <span className="bg-clip-text text-transparent bg-gradient-to-r from-primary-600 to-primary-700">{selectedTrigramme}</span>
                                                </>
                                            ) : (
                                                "Tous les Services"
                                            )}
                                        </h1>
                                        <p className="mt-2 text-neutral-600">
                                            {selectedTrigramme
                                                ? `Explorez les services disponibles pour le trigramme ${selectedTrigramme}`
                                                : "Explorez tous les services disponibles"}
                                        </p>
                                    </div>

                                    <div className="w-full md:w-96">
                                        <motion.div
                                            className="relative"
                                            whileHover={{ scale: 1.02 }}
                                            whileFocus={{ scale: 1.02 }}
                                        >
                                            <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                                <Search className="h-5 w-5 text-primary-500" />
                                            </div>
                                            <input
                                                type="text"
                                                placeholder="Rechercher un service..."
                                                className="w-full pl-12 pr-4 py-4 bg-white/80 backdrop-blur-lg border border-neutral-200 rounded-2xl focus:ring-primary-500 focus:border-primary-500 shadow-lg"
                                                value={searchTerm}
                                                onChange={(e) => setSearchTerm(e.target.value)}
                                            />
                                        </motion.div>
                                    </div>
                                </motion.div>

                                {/* Trigramme selector */}
                                <div className="mb-8">
                                    <TrigrammeSelect
                                        trigrammes={trigrammes}
                                        selectedTrigramme={selectedTrigramme}
                                        setSelectedTrigramme={setSelectedTrigramme}
                                        isLoading={trigrammesLoading}
                                    />
                                </div>

                                {(servicesLoading || allServicesLoading) ? (
                                    <LoadingSpinner />
                                ) : (
                                    <>
                                        <ServicesList
                                            services={paginatedServices}
                                            selectedService={selectedService ?? null}
                                            onSelectService={handleServiceSelection}
                                        />
                                        {totalPages > 1 && (
                                            <Pagination
                                                currentPage={currentPage}
                                                totalPages={totalPages}
                                                onPageChange={setCurrentPage}
                                            />
                                        )}
                                    </>
                                )}
                            </div>
                        )}
                    </motion.div>
                </AnimatePresence>
            </main>

            <Footer />
        </div>
    );
}

export default APIDocumentation;
