Titre du sujet
Plateforme de management des releases et de suivi des changements par branche

Contexte
Dans les équipes de développement, plusieurs branches Git sont utilisées en parallèle pour ajouter des fonctionnalités ou corriger des bugs.
Il arrive souvent que des changements importants soient faits sur une branche, mis en production, mais oubliés ou non reportés sur d’autres branches.
Ce manque de visibilité peut entraîner :
* Des oublis de fusion (merge)
* Des conflits lors des prochaines mises en production
* Des régressions ou des pertes de fonctionnalités
Objectif du projet
Développer une plateforme web qui permet :
* De visualiser, pour chaque branche, la liste des changements apportés (commits, tickets, descriptions…)
* De suivre l’état des releases (ce qui a été livré, ce qui reste à livrer)
* D’alerter les développeurs sur les changements non fusionnés ou non livrés
* De générer automatiquement des changelogs pour chaque release
Fonctionnalités attendues
1. Tableau de bord des branches
* Affichage de toutes les branches actives d’un ou plusieurs dépôts Git
* Pour chaque branche :
* Liste des commits (message, auteur, date)
* Description des changements (liens vers tickets Jira, user stories, etc.)
* Statut : livré en production, en attente, en cours de développement
2. Suivi des releases
* Historique des releases (date, contenu, branches concernées)
* Pour chaque release :
* Liste des changements inclus (commits, tickets)
* Génération automatique d’un changelog (exportable en PDF, Markdown…)
3. Alertes et notifications
* Alerte lorsqu’une branche contient des changements non fusionnés ou non livrés
* Notification lors de la création d’une nouvelle release ou d’un nouveau commit important
4. Recherche et filtres
* Recherche par branche, commit, auteur, ticket, date
* Filtres par type de changement (feature, bugfix, refactoring…)
5. Documentation et export
* Génération automatique de changelogs pour chaque release
* Export des rapports (PDF, Markdown, CSV…)
Pistes de faisabilité technique
Backend – Spring Boot
* Accès aux dépôts Git :
* Utiliser la librairie JGit pour interagir avec des dépôts Git locaux ou distants (lecture des branches, commits, merges…)
* Ou consommer les API REST de GitHub/GitLab/Bitbucket pour récupérer les informations sur les branches, commits, pull requests, releases, etc.
* Modélisation :
* Entités : Dépôt, Branche, Commit, Release, Utilisateur, Ticket
* Services pour synchroniser régulièrement les informations depuis les dépôts
* API REST :
* Exposer des endpoints pour le frontend (ex : /branches, /releases, /commits, /alerts…)
* Sécurité :
* Authentification des utilisateurs (Spring Security)
* Gestion des droits d’accès (lecture/écriture)
* Base de données :
* Stocker l’historique des releases, les alertes, les utilisateurs, les configurations
* 
* Exposer des endpoints pour le frontend (ex : /branches, /releases, /commits, /alerts…)
Frontend – React
* Tableau de bord interactif :
* Affichage des branches, releases, commits sous forme de listes, timelines, ou graphiques
* Utilisation de Material-UI ou Ant Design pour une interface moderne
* Filtres et recherche :
* Barre de recherche, filtres dynamiques
* Alertes et notifications :
* Affichage d’alertes en temps réel (ex : badge, pop-up)
* Pages dédiées :
* Détail d’une branche (liste des commits, statut…)
* Détail d’une release (changements inclus, changelog généré…)
* Export :
* Boutons pour exporter les changelogs ou rapports
Exemple de workflow technique
1. Synchronisation :
* Le backend interroge régulièrement les dépôts Git (via JGit ou API) pour récupérer les nouvelles branches, commits, merges, releases.
1. Stockage :
* Les informations sont stockées en base pour permettre des recherches rapides et l’historique.
1. Affichage :
* Le frontend interroge l’API pour afficher les branches, releases, commits, alertes.
1. Alertes :
* Le backend détecte les branches avec des commits non fusionnés ou non livrés et génère des alertes, affichées sur le frontend.
1. Génération de changelog :
* Lorsqu’une release est créée, le backend génère automatiquement un changelog à partir des commits inclus.

