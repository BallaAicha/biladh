package com.socgen.unibank.bridge.model.request;

import com.socgen.unibank.domain.base.Amount;
import com.socgen.unibank.domain.base.AccountId;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

@Getter
@Setter
@SuppressWarnings("PMD.ClassNamingConventions")
@Schema(description = "Requête pour créer un prêt amortissable")
public class _CreateAmortizableLoanRequest {

    @NotNull
    @Schema(description = "Type de prêt", example = "TYP_736", required = true)
    private LoanType loanType;

    @NotNull
    @Schema(description = "Type d'échéancier", example = "CONSTANT", required = true)
    private ScheduleType scheduleType;

    @NotNull
    @Valid
    @Schema(description = "Liste des acteurs (emprunteur, co-emprunteur, caution)", required = true)
    private List<Actor> actors;

    @NotNull
    @Schema(description = "Code client", example = "0000300002776", required = true)
    private String customerCode;

    @NotNull
    @Schema(description = "Code agence", example = "00003", required = true)
    private String branch;

    @NotNull
    @Valid
    @Schema(description = "Compte de remboursement", required = true)
    private AccountId repaymentAccount;

    @NotNull
    @Valid
    @Schema(description = "Montant du capital", required = true)
    private Amount capitalAmount;

    @NotNull
    @Positive
    @Schema(description = "Taux d'intérêt", example = "20.0", required = true)
    private Double interestRate;

    @NotNull
    @Positive
    @Schema(description = "Montant des frais", example = "25000.0", required = true)
    private Double fees;

    @NotNull
    @Schema(description = "Date d'établissement du prêt (format: yyyy-MM-dd)", example = "2021-08-24", required = true)
    private String establishmentDate;

    @NotNull
    @Schema(description = "Date de première échéance (format: yyyy-MM-dd)", example = "2021-08-27", required = true)
    private String firstInstallmentDate;

    @NotNull
    @Min(1)
    @Max(600)
    @Schema(description = "Nombre d'échéances", example = "60", required = true)
    private Integer installmentsNumber;

    @NotNull
    @Schema(description = "Note ou commentaire", example = "PPO-3608", required = true)
    private String note;
}


-------------------
package com.socgen.unibank.bridge.model.request;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Acteur du prêt (emprunteur, co-emprunteur, caution)")
public class Actor {

    @NotNull
    @Schema(description = "Type d'acteur", example = "CO_BORROWER", required = true)
    private ActorType actorType;

    @NotNull
    @Schema(description = "Code client", example = "0000300002776", required = true)
    private String customerCode;

    @NotNull
    @Min(0)
    @Max(100)
    @Schema(description = "Taux de répartition (ne doit pas dépasser 100%)", example = "100.0", required = true)
    private Double distributedRate;
}


-----------


package com.socgen.unibank.bridge.model.usecases.impl;

import com.socgen.unibank.bridge.model.request._CreateAmortizableLoanRequest;
import com.socgen.unibank.bridge.model.request.Actor;
import com.socgen.unibank.bridge.model.response.AmortizableLoanAck;
import com.socgen.unibank.bridge.model.usecases._CreateAmortizableLoan;
import com.socgen.unibank.domain.base.RequestContext;
import com.socgen.unibank.bridge.amplitude.AmplitudeProvider;
import com.socgen.unibank.bridge.amplitude.AmplitudeProviderFactory;
import com.socgen.unibank.bridge.amplitude.SMG;
import com.socgen.unibank.utils.MapUtil;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class _CreateAmortizableLoanImpl implements _CreateAmortizableLoan {

    private final AmplitudeProviderFactory amplitudeProviderFactory;
    private final Logger logger = LoggerFactory.getLogger(_CreateAmortizableLoanImpl.class);

    @Override
    public AmortizableLoanAck handle(_CreateAmortizableLoanRequest input, RequestContext context) {
        AmplitudeProvider provider = amplitudeProviderFactory.createProvider(context);
        SMG smg = SMG.createAmortizableLoan;
        provider.validate(input);

        // Construction des acteurs pour la transformation - paymentMethod hardcodé à "01"
        String actorsJson = input.getActors().stream()
            .map(actor -> String.format(
                "{\"actorType\":\"%s\",\"customerCode\":\"%s\",\"distributedRate\":%s}",
                actor.getActorType().getCode(),
                actor.getCustomerCode(),
                actor.getDistributedRate()
            ))
            .collect(Collectors.joining(",", "[", "]"));

        Map<String, Object> payload = MapUtil.of(
            "branchCode", input.getBranch(),
            "currencyCode", input.getCapitalAmount().getCurrency().getCode(),
            "loanTypeCode", input.getLoanType().name().replace("TYP_", ""),
            "customerCode", input.getCustomerCode(),
            "establishmentDate", input.getEstablishmentDate(),
            "firstInstallmentDate", input.getFirstInstallmentDate(),
            "installmentsNumber", input.getInstallmentsNumber(),
            "scheduleType", input.getScheduleType().getLabel(),
            "capitalAmount", BigDecimal.valueOf(input.getCapitalAmount().getAmount()).toPlainString(),
            "interestRate", input.getInterestRate().toString(),
            "feesAmount", input.getFees().toString(),
            "loanFileNote", input.getNote(),
            "actors", actorsJson,
            "repaymentAccountBranch", input.getRepaymentAccount().getBranchCode(),
            "repaymentAccountCurrency", input.getRepaymentAccount().getCurrency().getCode(),
            "repaymentAccountNumber", input.getRepaymentAccount().getAccountNumber(),
            "applicationCode", context.getApplicationName()
        );

        return provider.sendSoapRequest(context, smg, payload, AmortizableLoanAck.class);
    }
}

------------
id: createAmortizableLoan
entityId: BF
description: 'Transformation spécifique pour la filiale BURKINA - SMG createAmortizableLoan'
tag: amplitude_v11

request:
  kind: pebble
  spec: >-
    <loanFileGeneralInformations>
      <branchCode>{{ branchCode }}</branchCode>
      <currencyCode>{{ currencyCode }}</currencyCode>
      <loanTypeCode>{{ loanTypeCode }}</loanTypeCode>
      <customerCode>{{ customerCode }}</customerCode>
    </loanFileGeneralInformations>
    <loanFileObject>
      <objectCommentDetail>
        <objectComment>1</objectComment>
      </objectCommentDetail>
    </loanFileObject>
    <loanFileDescription>
      <establishmentDate>{{ establishmentDate }}+02:00</establishmentDate>
      <firstInstallmentDate>{{ firstInstallmentDate }}+02:00</firstInstallmentDate>
      <installmentsNumber>{{ installmentsNumber }}</installmentsNumber>
      <scheduleType>{{ scheduleType }}</scheduleType>
    </loanFileDescription>
    <loanFileAccessories>
      <capital>
        <capitalAmount>{{ capitalAmount }}</capitalAmount>
      </capital>
      <interest>
        <interestRate>{{ interestRate }}</interestRate>
      </interest>
      <fees>
        <feesAmountOrRate>
          <amount>{{ feesAmount }}</amount>
        </feesAmountOrRate>
      </fees>
      <loanFileAccessories>
        <loanFileNotepad>
          <loanFileNote>{{ loanFileNote }}</loanFileNote>
        </loanFileNotepad>
      </loanFileAccessories>
    </loanFileAccessories>
    <loanFileInstallmentDistribution>
      {% for actor in actors %}
      <actor>
        <actorType>{{ actor.actorType }}</actorType>
        <customerOrThirdPartyCode>
          <customerCode>{{ actor.customerCode }}</customerCode>
          <customerOrThirdPartyCode>
            <paymentMethod>01</paymentMethod>
            <distributedRate>{{ actor.distributedRate }}</distributedRate>
          </customerOrThirdPartyCode>
        </customerOrThirdPartyCode>
      </actor>
      {% endfor %}
    </loanFileInstallmentDistribution>
    <loanFileRepaymentInformation>
      <bankAccount>
        <repaymentAccount>
          <branch>{{ repaymentAccountBranch }}</branch>
          <currency>{{ repaymentAccountCurrency }}</currency>
          <account>{{ repaymentAccountNumber }}</account>
        </repaymentAccount>
      </bankAccount>
    </loanFileRepaymentInformation>

response:
  kind: jolt
  spec: >-
    [
      {
        "operation": "shift",
        "spec": {
          "responseStatus": {
            "statusCode": {
              "0": {
                "#0": "responseStatus",
                "#": "message"
              },
              "1": {
                "#1": "responseStatus",
                "#": "message"
              },
              "*": {
                "#ERROR": "responseStatus",
                "#": "message"
              }
            }
          },
          "createAmortizableLoanResponse": {
            "amortizableLoanIdentifier": {
              "fileNumber": "fileNumber",
              "orderNumber": "orderNumber"
            },
            "amendmentNumber": "amendmentNumber"
          }
        }
      },
      {
        "operation": "default",
        "spec": {
          "responseStatus": "0",
          "message": ""
        }
      }
    ]
