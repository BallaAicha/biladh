import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.ConfigurableApplicationContext;

import java.lang.management.ManagementFactory;
import java.lang.management.MemoryUsage;

@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication app = new SpringApplication(DemoApplication.class);

        // Ajout d‚Äôun listener pour mesurer les m√©triques
        app.addListeners((ApplicationListener<ApplicationReadyEvent>) event -> {
            ConfigurableApplicationContext ctx = event.getApplicationContext();

            // 1Ô∏è‚É£ Temps de d√©marrage
            long jvmStartTime = ManagementFactory.getRuntimeMXBean().getStartTime();
            long now = System.currentTimeMillis();
            long duration = now - jvmStartTime;

            // 2Ô∏è‚É£ Nombre de beans instanci√©s
            int beanCount = ctx.getBeanDefinitionCount();

            // 3Ô∏è‚É£ M√©moire utilis√©e
            MemoryUsage heapMemoryUsage = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
            long usedMemoryMb = heapMemoryUsage.getUsed() / (1024 * 1024);

            // 4Ô∏è‚É£ Threads actifs
            int threadCount = ManagementFactory.getThreadMXBean().getThreadCount();

            // Affichage des m√©triques
            System.out.println("üìä --- METRICS DEMARRAGE ---");
            System.out.println("‚è± Temps total JVM + Spring Boot : " + duration + " ms (" + (duration / 1000.0) + " s)");
            System.out.println("üß© Nombre de beans instanci√©s : " + beanCount);
            System.out.println("üíæ M√©moire utilis√©e au d√©marrage : " + usedMemoryMb + " Mo");
            System.out.println("‚ö° Threads actifs au d√©marrage : " + threadCount);
        });

        app.run(args);
    }
}
