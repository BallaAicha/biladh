@SneakyThrows
public static void bootstrap(DataSource dataSource, String tablesPrefix, String schemaName) {
    if (initializedSchemas.contains(schemaName)) {
        return;
    }
    initializedSchemas.add(schemaName);
    
    SpringLiquibase liquibase = new SpringLiquibase() {
        @Override
        protected Liquibase createLiquibase(Connection c) throws LiquibaseException {
            // Créer notre ResourceAccessor custom
            AutoQuotingResourceAccessor resourceAccessor = new AutoQuotingResourceAccessor();
            
            // Créer la database
            Database database = DatabaseFactory.getInstance()
                    .findCorrectDatabaseImplementation(new JdbcConnection(c));
            
            // Configurer la database
            database.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS);
            
            if (database instanceof liquibase.database.core.H2Database) {
                try (Statement stmt = c.createStatement()) {
                    stmt.execute("SET DATABASE_TO_UPPER FALSE");
                } catch (SQLException e) {
                    throw new LiquibaseException(e);
                }
            }
            
            // Créer Liquibase
            Liquibase liquibase = new Liquibase(getChangeLog(), resourceAccessor, database);
            
            // Appliquer les paramètres s'ils existent
            Map<String, String> params = getChangeLogParameters();
            if (params != null) {
                for (Map.Entry<String, String> entry : params.entrySet()) {
                    liquibase.setChangeLogParameter(entry.getKey(), entry.getValue());
                }
            }
            
            return liquibase;
        }
    };
    
    // Configuration
    liquibase.setChangeLog("classpath:db/liquibase-master-changelog.xml");
    liquibase.setDropFirst(false);
    
    if (!StringUtils.isBlank(tablesPrefix)) {
        liquibase.setChangeLogParameters(ImmutableMap.of(
                "service.name", tablesPrefix
        ));
        liquibase.setDatabaseChangeLogLockTable(tablesPrefix + "_changelog_lock");
        liquibase.setDatabaseChangeLogTable(tablesPrefix + "_changelog");
    }
    
    liquibase.setDataSource(dataSource);
    
    if (!StringUtils.isBlank(schemaName)) {
        liquibase.setDefaultSchema(schemaName);
        liquibase.setLiquibaseSchema(schemaName);
    }
    
    liquibase.afterPropertiesSet();
}
